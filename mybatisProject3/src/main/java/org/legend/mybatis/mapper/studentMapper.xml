<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--    具体实现的步骤：
1.基础环境：mybatis.jar/ojdbc.jar、conf.xml、mapper.xml
2.（不同之处）
	约定的目标： 省略掉statement,即根据约定 直接可以定位出SQL语句

  a.接口，接口中的方法必须遵循以下约定：
		 *1.方法名和mapper.xml文件中标签的id值相同
		 * 2.方法的 输入参数 和mapper.xml文件中标签的 parameterType类型一致 (如果mapper.xml的标签中没有 parameterType，则说明方法没有输入参数)
		 * 3.方法的返回值  和mapper.xml文件中标签的 resul``tType类型一致 （无论查询结果是一个 还是多个（student、List<Student>），在mapper.xml标签中的resultType中只写 一个（Student）；如果没有resultType，则说明方法的返回值为void）

除了以上约定，要实现 接口中的方法  和  Mapper.xml中SQL标签一一对应，还需要以下1点：
	namespace的值 ，就是  接口的全类名（ 接口 - mapper.xml 一一对应映射）

匹配的过程：（约定的过程）
1.根据 接口名 找到 mapper.xml文件（根据的是namespace=接口全类名）
2.根据 接口的方法名 找到 mapper.xml文件中的SQL标签 （方法名=SQL标签Id值）

以上2点可以保证： 当我们调用接口中的方法时，
程序能自动定位到 某一个Mapper.xml文件中的sqL标签
习惯：SQL映射文件（mapper.xml） 和 接口放在同一个包中 （注意修改conf.xml中加载mapper.xml文件的路径）

以上，可以通过接口的方法->SQL语句
-->
<!--
    补充:第三种：namespace绑定的是mapper接口对应的sql.xml文件是，其也是有代理模式自动实现数据持久化。
		但mapper接口对应的sql.xml文件名必须保持一致才能自动实现数据持久化。
			<mapper namespace="com.system.sql.LiveInfoMapper"></namespace>
-->
<mapper namespace="org.legend.mybatis.mapper.StudentMapper">

    <!--  后续通过  namespace.id-->
    <!-- mybatisproject2:
            parameterType:输入参数(stuNo)的类型
            resultType：查询返回结果值的类型  ，返回类型  -->
<!--    <select id="queryPersonById" parameterType="int" resultType="Student">-->

<!--    mybatisproject3:
        查询：使用了类型转换器
            1.如果 类中属性名 和表中的字段名能够合理识别 （stuNo -stuno）则可以使用resultType;
                否则(id-stuno) 使用resultMap
        -->
    <select id="queryStudentByStuno" parameterType="int" resultMap="studentMapping"><!-- 基于接口的方法定位通过id定位sql  -->
        <!--mybatisproject2:
               输入参数parameterType 和 输出参数resultType ，在形式上都只能有一个;     -如果比如输入参数涉及多个,用集合,对象.
               如果输入参数 ：是简单类型（8个基本类型+String） 是可以使用任何占位符,#{xxxx}
                  如果是对象类型，则必须是对象的属性 #{属性名}

               输出参数：  如果返回值类型是一个 对象（如Student），则无论返回一个、还是多个，
                            在resultType都写成org.legend.Student
                                即 resultType="Student"
            -->
        select stuNo,stuName from student where stuNo = #{stuNo}
    </select>

    <resultMap id="studentMapping" type="student"><!-- type由conf.xml文件的typeAliases定义-->
        <!-- 分为主键id 和非主键 result-->
<!--        <id property="id"  column="stuno"  /> &lt;!&ndash; Student类中有个属性名为id对应表中stuno字段名,因此使用"使用了类型转换器" &ndash;&gt;-->
        <id property="stuNo"  column="stuno"  />
        <result property="stuName"  column="stuname" />
        <result property="stuAge"  column="stuage" />
        <result property="graName"  column="graname" />
        <result property="stuSex"  column="stusex"  javaType="boolean" jdbcType="INTEGER"/>
    </resultMap>

    <!-- mybatisproject3:
        查询：使用了类型转换器
            2.如果 类中属性 和表中的字段 类型能够合理识别 （String-varchar2），则可以使用resultType;
                否则(boolean-number) 使用resultMap
         -->
    <!--  带转换器的查询  -->
    <select id="queryStudentByStunoWithConverter" parameterType="int" resultMap="studentResult" >
        select * from student where stuno = #{stuno}
    </select>

    <resultMap type="student" id="studentResult">
        <!-- 分为主键id 和非主键 result-->
        <id property="stuNo"  column="stuno" />
        <result property="stuName"  column="stuname" />
        <result property="stuAge"  column="stuage" />
        <result property="graName"  column="graname" />
        <result property="stuSex"  column="stusex"  javaType="boolean" jdbcType="INTEGER"/>
    </resultMap>


    <!-- 带转换器的增加 -->
    <insert id="addStudentWithConverter" parameterType="student" >
        insert into student(stuno,stuname,stuage,graname,stusex) values(#{stuNo},#{stuName},#{stuAge},#{graName} ,#{stuSex ,javaType=boolean  ,jdbcType=INTEGER   } )
    </insert>

    <insert id="addStudent" parameterType="Student" >
        insert into student(stuno,stuname,stuage,graname) values(#{stuNo},#{stuName},#{stuAge},#{graName}  )
    </insert>


    <delete id="deleteStudentByStuno"  parameterType="int">
        delete from student where stuno = #{stuno}
    </delete>

    <update id="updateStudentByStuno" parameterType="Student" >
        update student set stuname=#{stuName} ,stuage=#{stuAge},graname=#{graName} where stuno=#{stuNo}
    </update>

    <select id="queryAllStudents"  resultType="Student" >
        select * from student
    </select>
</mapper>

